// This is supporting software for CS321/CS322 Compilers and Language Design.
// Copyright (c) Portland State University.
//---------------------------------------------------------------------------
// For CS321 F'15 (J. Li).
//
// Kathleen Tran
//
// This parser is based on my own grammar.
//

// options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(Parser)
import java.util.*;
import java.io.*;
import ast.*;

public class Parser {
  public static void main(String [] args) {
    if (args.length < 1) {
      System.out.println("Need a file name as command-line argument.");
      return;
    }
    try {
      FileReader input = new FileReader(args[0]);
      Ast.Program p = new Parser(input).Program();
      input.close();
      System.out.print(p);
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(Parser)

//
// LEXER SECTION ---------------------------------------------------------------
//
// A simplified version. Error detections are not included.
//
SKIP:  /* Whitespace */
{
  " " | "\t" | "\r" | "\n"
}

SKIP:  /* Comments -- single-line form only */
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN:  /* Keywords */
{
  "class" | "extends" | "static" | "public" | "main" | "void" | "boolean"
| "int" | "double" | "String" | "true" | "false" | "new" | "this" | "if"
| "else" | "while" | "return" | "System" | "out" | "println"
}

TOKEN:  /* Literals and IDs */
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: ["A"-"Z"]|["a"-"z"]>
| <INTLIT:  "0"|["1"-"9"](<DIGIT>)*> 	// decimal form only
| <DBLLIT:  (<DIGIT>)+"."(<DIGIT>)*|(<DIGIT>)*"."(<DIGIT>)+>
| <STRLIT:  ("\"" (~["\"","\r","\n"])* "\"")>
| <ID:      <LETTER> (<LETTER>|<DIGIT>)*>
}

TOKEN:  /* Operators and delimiters */
{
  "+" | "-" | "*" | "/" | "&&" | "||" | "!" | "==" | "!=" | "<" | "<="
| ">" | ">=" |  "=" | ";" | "," | "." | "(" | ")" | "[" | "]" | "{" | "}"
}

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
Ast.Program Program():
{ List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c; }
{
  ( c=ClassDecl() {cl.add(c);} )* <EOF>
  { return new Ast.Program(cl); }
}

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//
Ast.ClassDecl ClassDecl():
{ List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
  List<Ast.MethodDecl> ml = new ArrayList<Ast.MethodDecl>();
  Ast.VarDecl v;
  Ast.MethodDecl m;
  Ast.Id id, pid = null; }
{
  "class" id=Id() [ "extends" pid=Id() ]
    "{" (LOOKAHEAD(2) v=VarDecl() {vl.add(v);} )*
        ( m=MethodDecl() {ml.add(m);} )* "}"
  { return new Ast.ClassDecl(id.nm,pid==null?null:pid.nm,vl,ml); }
}

// MethodDecl -> {Type} <ID> "(" {Param} ")"
Ast.MethodDecl MethodDecl():
{ Ast.Type t;
  Ast.Id id;
  Ast.Param param; Ast.VarDecl var; Ast.Stmt stmt;
  List<Ast.Param> params = new ArrayList<Ast.Param>();
  List<Ast.VarDecl> vars = new ArrayList<Ast.VarDecl>();
  List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>(); }
{
  ["public"] ["static"] t=Type() id=Id()
    "(" ( param=Param() {params.add(param);} )* ")"
    "{" (LOOKAHEAD(2) var=VarDecl() {vars.add(var);} )*
        ( stmt=Stmt() {stmts.add(stmt);} )* "}"
  { return new Ast.MethodDecl(t, id.nm, params, vars, stmts); }
}

// VarDecl -> {Type} <ID> {Exp}
Ast.VarDecl VarDecl():
{ Ast.Type t;
  Ast.Id id;
  Ast.Exp init; }
{
  t=Type() id=Id() ["=" init=InitExpr()] ";"
  { return new Ast.VarDecl(t, id.nm, init); }
}

// Param -> {Type} <ID>
Ast.Param Param():
{ Ast.Type t; Ast.Id id; }
{
  t=Type() id=Id()
  { return new Ast.Param(t, id.nm); }
}

// ------- BEGIN TYPES -------
//
Ast.Type ExtType():
{ Ast.Type type; Token tkn; }
{
  type=Type()
  { return type; }
| tkn="void"
  { return new Ast.ObjType(tkn.image); }
}

Ast.Type Type():
{ Ast.Type type; Ast.Id id; }
{
  type=BasicType()
  (
    "[" "]"
    { return new Ast.ArrayType(type); }
  )?
	{ return type; }
| id=Id()
  { return new Ast.ObjType(id.nm); }
}

Ast.Type BasicType():
{ Token tkn; }
{
	tkn="int" | tkn="double" | tkn="boolean"
  { switch (tkn.image) {
      case "int":
        return new Ast.IntType();
      case "double":
        return new Ast.DblType();
      case "boolean":
        return new Ast.BoolType();
    }
  }
}
//
// ------- END TYPES -------

// ------- BEGIN STATEMENTS -------
//
Ast.Stmt Stmt():
{ Ast.Stmt s1, s2;
	List<Ast.Stmt> sl;
	Ast.Field f;
  Ast.Exp e1, e2, e3;
  List<Ast.Exp> el;}
{ 
  "{" ( s1=Stmt() { sl.add(s1); } )* "}"
  { return new Ast.Block(sl); }
| f=ExtId()
  (
    ("(" [el=Args()] ")" ";")
    { return new Ast.CallStmt(f.obj, f.nm, el); }
  |
    (
			"[" e1=Expr() "]" { e2 = new Ast.ArrayElm(f, e1); }
		)?
		("=" e3=InitExpr() ";")
    { return new Ast.Assign(f, e3); }
  )
| "if" "(" e1=Expr() ")" s1=Stmt() [LOOKAHEAD(2)"else" s2=Stmt()]
  { return new Ast.If(e1, s1, s2); }
| "while" "(" e1=Expr() ")" s1=Stmt()
  { return new Ast.While(e1, s1); }
| "System" "." "out" "." "println" "(" [ e1=PrArg() ] ")" ";"
  { return new Ast.Print(e1); }
| "return" [e1=Expr()] ";"
  { return new Ast.Return(e1); }
}
//
// ------- END STATEMENTS -------

// ------- BEGIN EXPRESSIONS -------
//
List<Ast.Exp> Args():
{ Ast.Exp expr;
  List<Ast.Exp> exprs = new ArrayList<Ast.Exp>(); }
{
  ( expr=Expr() {exprs.add(expr);} )+
  { return exprs; }
}

Ast.Exp PrArg():
{ Ast.Exp exp; Token tkn; }
{
  LOOKAHEAD(2) exp=Expr()
  { return exp; }
| tkn=<STRLIT>
  { return new Ast.StrLit(tkn.image); }
}

Ast.Exp InitExpr():
{ Ast.Exp exp; }
{
  "new" exp=I1()
  { return exp; }
| exp=Expr()
  { return exp; }
}

Ast.Exp I1():
{ Ast.Type type; Token tkn;
	Ast.Id id; Ast.IntLit intlit; }
{
  type=BasicType() "[" tkn=<INTLIT> "]"
  { intlit = new Ast.IntLit(Integer.parseInt(tkn.image));
    return new Ast.NewArray(type, intlit.i); }
| id=Id() "(" ")"
  { return new Ast.NewObj(id.nm); }
}

Ast.Exp ExtId():
{ Ast.Exp e;
  Ast.This t = null;
  Ast.Id id; }
{
  [ "this" "." { t = new Ast.This(); } ]
  id=Id() {
    if (t != null)
      e = new Ast.Field(t, id.nm);
    else
      e = id; }
  ( "." id=Id() { e = new Ast.Field(e, id.nm); } )*
  { return e; }
}

// ------- BEGIN EXPRESSIONS CASCADE -------
//
Ast.Exp Expr():
{ Ast.Exp lhs, rhs; Ast.BOP binop; }
{
  lhs=Expr1()
  (
    binop=OROP() rhs=Expr1()
    { return new Ast.Binop(binop, lhs, rhs); }
  )*
  { return lhs; }
}

Ast.Exp Expr1():
{ Ast.Exp lhs, rhs; Ast.BOP binop; }
{
  lhs=Expr2()
  (
    binop=ANDOP() rhs=Expr2()
    { return new Ast.Binop(binop, lhs, rhs); }
  )*
  { return lhs; }
}

Ast.Exp Expr2():
{ Ast.Exp lhs, rhs; Ast.BOP binop; }
{
  lhs=Expr3()
  (
    binop=CMPOP() rhs=Expr3()
    { return new Ast.Binop(binop, lhs, rhs); }
  )*
  { return lhs; }
}

Ast.Exp Expr3():
{ Ast.Exp lhs, rhs; Ast.BOP binop; }
{
  lhs=Expr4()
  (LOOKAHEAD(2)
    binop=ADDSUBOP() rhs=Expr4()
    { return new Ast.Binop(binop, lhs, rhs); }
  )*
  { return lhs; }
}

Ast.Exp Expr4():
{ Ast.Exp lhs, rhs; Ast.BOP binop; }
{
  lhs=Expr5()
  (
    binop=MULDIVOP() rhs=Expr5()
    { return new Ast.Binop(binop, lhs, rhs); }
  )*
  { return lhs; }
}

Ast.Exp Expr5():
{ Ast.Exp exp; Ast.UOP unop; }
{
  (
    unop=UNOP() exp=Expr()
    { return new Ast.Unop(unop, exp); }
  )*
  exp=Expr6()
  { return exp; }
}

Ast.Exp Expr6():
{ Ast.Exp exp;
  List<Ast.Exp> el; }
{
  exp=ExtId()
  (
    "[" exp=Expr() "]"
    { return exp; }
  | "(" ( el=Args() )? ")"
    { return el; }
  )?
| exp=Expr7()
  { return exp; }
}

Ast.Exp Expr7():
{ Ast.Exp exp; }
{
  "(" exp=Expr() ")"
  { return exp; }
| exp=Literal()
  { return exp; }
}
//
// ------- END EXPRESSIONS CASCADE -------
// ------- END EXPRESSIONS -------

// ------- BEGIN LITERALS -------
//
// IntLit, DblLit, BoolLit, StrLit
Ast.Exp Literal():
{ Token tkn;
  Ast.IntLit intlit; Ast.DblLit dbllit; Ast.BoolLit boollit; Ast.StrLit strlit; }
{
  tkn=<INTLIT>
  { intlit = new Ast.IntLit(Integer.parseInt(tkn.image));
    return intlit; }
| tkn=<DBLLIT>
  { dbllit = new Ast.DblLit(Double.parseDouble(tkn.image));
    return dbllit; }
| (tkn="true"|tkn="false")
  { boollit = new Ast.BoolLit(Boolean.parseBoolean(tkn.image));
    return boollit; }
| tkn=<STRLIT>
  { return new Ast.StrLit(tkn.image); }
}
//
// ------- END LITERALS -------

// Id -> <ID>
// Ast.Id object or String
Ast.Id Id():
{ Token tkn; }
{
  tkn=<ID>
  { return new Ast.Id(tkn.image); }
}

// ------- BEGIN OPERATORS -------
//
// binary operators
Ast.BOP OROP(): {}
{
  "||" { return Ast.BOP.OR; }
}

Ast.BOP ANDOP(): {}
{
  "&&" { return Ast.BOP.AND; }
}

Ast.BOP CMPOP(): {}
{
  "==" { return Ast.BOP.EQ; }
| "!=" { return Ast.BOP.NE; }
| "<"  { return Ast.BOP.LT; }
| "<=" { return Ast.BOP.LE; }
| ">"  { return Ast.BOP.GT; }
| ">=" { return Ast.BOP.GE; }
}

Ast.BOP ADDSUBOP(): {}
{
  "+"  { return Ast.BOP.ADD; }
| "-"  { return Ast.BOP.SUB; }
}

Ast.BOP MULDIVOP(): {}
{
  "*"  { return Ast.BOP.MUL; }
| "/"  { return Ast.BOP.DIV; }
}

// unary operators
Ast.UOP UNOP(): {}
{
  "-" { return Ast.UOP.NEG; }
| "!" { return Ast.UOP.NOT; }
}
//
// ------- END OPERATORS -------

