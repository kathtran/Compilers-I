/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.*;
import ast.*;

public class Parser implements ParserConstants {
  public static void main(String [] args) {
    if (args.length < 1) {
      System.out.println("Need a file name as command-line argument.");
      return;
    }
    try {
      FileReader input = new FileReader(args[0]);
      Ast.Program p = new Parser(input).Program();
      input.close();
      System.out.print(p);
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
  static final public Ast.Program Program() throws ParseException {
  List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                   cl.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
  List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
  List<Ast.MethodDecl> ml = new ArrayList<Ast.MethodDecl>();
  Ast.VarDecl v;
  Ast.MethodDecl m;
  Ast.Id id, pid = null;
    jj_consume_token(6);
    id = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      pid = Id();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(54);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      v = VarDecl();
                                   vl.add(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      m = MethodDecl();
                          ml.add(m);
    }
    jj_consume_token(55);
    {if (true) return new Ast.ClassDecl(id.nm,pid==null?null:pid.nm,vl,ml);}
    throw new Error("Missing return statement in function");
  }

// MethodDecl -> {Type} <ID> "(" {Param} ")"
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
  Ast.Type t;
  Ast.Id id;
  Ast.Param param; Ast.VarDecl var; Ast.Stmt stmt;
  List<Ast.Param> params = new ArrayList<Ast.Param>();
  List<Ast.VarDecl> vars = new ArrayList<Ast.VarDecl>();
  List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
    t = jj_consume_token(ID);
    id = Id();
    jj_consume_token(50);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      param = Param();
                         params.add(param);
    }
    jj_consume_token(51);
    jj_consume_token(54);
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      var = VarDecl();
                                     vars.add(var);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 22:
      case 23:
      case 24:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
      case 54:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_6;
      }
      stmt = Stmt();
                       stmts.add(stmt);
    }
    jj_consume_token(55);
    {if (true) return new Ast.MethodDecl(t, id.nm, params, vars, stmts);}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> {Type} <ID> {Exp}
  static final public Ast.VarDecl VarDecl() throws ParseException {
  Ast.Type t;
  Ast.Id id;
  Ast.Exp init;
    t = Type();
    id = Id();
    init = Exp();
    {if (true) return new Ast.VarDecl(t, id.nm, init);}
    throw new Error("Missing return statement in function");
  }

// Param -> {Type} <ID>
  static final public Ast.Param Param() throws ParseException {
  Ast.Type t; Ast.Id id;
    t = Type();
    id = Id();
    {if (true) return new Ast.Param(t, id.nm);}
    throw new Error("Missing return statement in function");
  }

// ------- BEGIN TYPES -------
//
// Type ->
// IntType, DblType, BoolType, ArrayType, ObjType
  static final public Ast.Type Type() throws ParseException {
  Token tkn;
    tkn = jj_consume_token(ID);
    if (tkn.image == "int")
      {if (true) return new Ast.IntType();}
    else if (tkn.image == "double")
      {if (true) return new Ast.DblType();}
    else if (tkn.image == "boolean")
      {if (true) return new Ast.BoolType();}
//      return new Ast.ArrayType(tkn.image);
//      return new Ast.ObjType();

    throw new Error("Missing return statement in function");
  }

//
// ------- END TYPES -------

// ------- BEGIN STATEMENTS -------
//
  static final public Ast.Stmt Stmt() throws ParseException {
  Ast.Stmt stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
    {if (true) return Block();}
      break;
    default:
      jj_la1[5] = jj_gen;
      if (jj_2_3(2)) {
        Exp();
    {if (true) return Assign();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 17:
        case INTLIT:
        case DBLLIT:
        case STRLIT:
          Literal();
    {if (true) return CallStmt();}
          break;
        case 20:
          jj_consume_token(20);
    {if (true) return If();}
          break;
        case 22:
          jj_consume_token(22);
    {if (true) return While();}
          break;
        case 24:
          jj_consume_token(24);
    {if (true) return Print();}
          break;
        case 23:
          jj_consume_token(23);
    {if (true) return Return();}
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt Block() throws ParseException {
  List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
  Ast.Stmt stmt;
    jj_consume_token(54);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 22:
      case 23:
      case 24:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
      case 54:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      stmt = Stmt();
                     stmts.add(stmt);
    }
    jj_consume_token(55);
    {if (true) return new Ast.Block(stmts);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt Assign() throws ParseException {
  Ast.Exp lhs, rhs;
    lhs = Exp();
    jj_consume_token(46);
    rhs = Exp();
    {if (true) return new Ast.Assign(lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt CallStmt() throws ParseException {
  Ast.Exp obj, exp;
  Ast.Id id;
  List<Ast.Exp> args = new ArrayList<Ast.Exp>();
    obj = Literal();
    jj_consume_token(49);
    id = Id();
    jj_consume_token(50);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      exp = Exp();
                     args.add(exp);
    }
    jj_consume_token(56);
    {if (true) return new Ast.CallStmt(obj, id.nm, args);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt If() throws ParseException {
  Ast.Exp cond;
  Ast.Stmt s1, s2;
    jj_consume_token(20);
    jj_consume_token(50);
    cond = Exp();
    jj_consume_token(51);
    s1 = Stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case INTLIT:
    case DBLLIT:
    case STRLIT:
    case ID:
    case 54:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        s2 = Stmt();
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 22:
      case 23:
      case 24:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
      case 54:
        s2 = Stmt();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return new Ast.If(cond, s1, s2);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt While() throws ParseException {
  Ast.Exp cond; Ast.Stmt stmt;
    jj_consume_token(22);
    jj_consume_token(50);
    cond = Exp();
    jj_consume_token(51);
    stmt = Stmt();
    {if (true) return new Ast.While(cond, stmt);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt Print() throws ParseException {
  Ast.Exp arg;
    jj_consume_token(24);
    jj_consume_token(49);
    jj_consume_token(25);
    jj_consume_token(49);
    jj_consume_token(26);
    jj_consume_token(50);
    arg = Exp();
    jj_consume_token(51);
    jj_consume_token(47);
    {if (true) return new Ast.Print(arg);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt Return() throws ParseException {
  Ast.Exp val;
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case 18:
    case 19:
    case INTLIT:
    case DBLLIT:
    case STRLIT:
    case ID:
      val = Exp();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(47);
    {if (true) return new Ast.Return(val);}
    throw new Error("Missing return statement in function");
  }

//
// ------- END STATEMENTS -------

// ------- BEGIN EXPRESSIONS -------
//
  static final public Ast.Exp Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case INTLIT:
    case DBLLIT:
    case STRLIT:
      Literal();
    {if (true) return Exp1();}
      break;
    case 18:
      jj_consume_token(18);
    {if (true) return NewArray();}
      break;
    case ID:
      Id();
    {if (true) return NewObj();}
      break;
    case 19:
      jj_consume_token(19);
    {if (true) return This();}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      Id();
    {if (true) return Exp2();}
      break;
    case 52:
      jj_consume_token(52);
    {if (true) return ArrayElm();}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Exp2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
    {if (true) return Call();}
      break;
    default:
      jj_la1[14] = jj_gen;
    {if (true) return Field();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Call() throws ParseException {
  Ast.Exp obj;
  Ast.Id id;
  List<Ast.Exp> args = new ArrayList<Ast.Exp>();
    obj = Literal();
    jj_consume_token(49);
    id = Id();
    jj_consume_token(50);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      exp = Exp();
                     args.add(exp);
    }
    jj_consume_token(56);
    {if (true) return new Ast.Call(obj, id.nm, args);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp NewArray() throws ParseException {
  Ast.Type type; Ast.Id id; int length;
    jj_consume_token(18);
    type = Type();
    jj_consume_token(52);
    length = jj_consume_token(INTLIT);
    jj_consume_token(53);
    {if (true) return new Ast.NewArray(type, length);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp ArrayElm() throws ParseException {
  Ast.Exp obj, index;
    obj = Literal();
    jj_consume_token(52);
    index = Exp();
    jj_consume_token(53);
    {if (true) return new Ast.ArrayElm(obj, index);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp NewObj() throws ParseException {
  Ast.Id id;
    id = Id();
    {if (true) return new Ast.NewObj(id.nm);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Field() throws ParseException {
  Ast.Exp obj; Ast.Id id;
    obj = Literal();
    jj_consume_token(49);
    id = Id();
    {if (true) return new Ast.Field(exp, id.nm);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp This() throws ParseException {
  Token tkn;
    tkn = jj_consume_token(19);
    {if (true) return new Ast.This();}
    throw new Error("Missing return statement in function");
  }

// ------- BEGIN EXPRESSIONS CASCADE -------
//
  static final public Ast.Exp Expr() throws ParseException {
  Ast.Exp lhs, rhs; Ast.BOP binop;
    lhs = Expr1();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      binop = OROP();
      rhs = Expr1();
      {if (true) return new Ast.Binop(binop, lhs, rhs);}
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr1() throws ParseException {
  Ast.Exp lhs, rhs; Ast.BOP binop;
    lhs = Expr2();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      binop = ANDOP();
      rhs = Expr2();
      {if (true) return new Ast.Binop(binop, lhs, rhs);}
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr2() throws ParseException {
  Ast.Exp lhs, rhs; Ast.BOP binop;
    lhs = Expr3();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      binop = CMPOP();
      rhs = Expr3();
      {if (true) return new Ast.Binop(binop, lhs, rhs);}
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr3() throws ParseException {
  Ast.Exp lhs, rhs; Ast.BOP binop;
    lhs = Expr4();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_13;
      }
      binop = ADDSUBOP();
      rhs = Expr4();
      {if (true) return new Ast.Binop(binop, lhs, rhs);}
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr4() throws ParseException {
  Ast.Exp lhs, rhs; Ast.BOP binop;
    lhs = Expr5();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_14;
      }
      binop = MULDIVOP();
      rhs = Expr5();
      {if (true) return new Ast.Binop(binop, lhs, rhs);}
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr5() throws ParseException {
  Ast.Exp exp; Ast.UOP unop;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
      case 39:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_15;
      }
      unop = UNOP();
      {if (true) return new Ast.Unop(unop, exp);}
    }
    exp = Expr6();
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr6() throws ParseException {
  Ast.Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        jj_consume_token(49);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(ID);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_16;
        }
        jj_consume_token(49);
        jj_consume_token(ID);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
      case 52:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          exp = Expr();
          jj_consume_token(53);
      {if (true) return exp;}
          break;
        case 50:
          jj_consume_token(50);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 16:
          case 17:
          case 19:
          case INTLIT:
          case DBLLIT:
          case STRLIT:
          case ID:
          case 34:
          case 39:
          case 50:
            exp = Expr();
            label_17:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 48:
                ;
                break;
              default:
                jj_la1[24] = jj_gen;
                break label_17;
              }
              jj_consume_token(48);
              exp = Expr();
            }
            break;
          default:
            jj_la1[25] = jj_gen;
            ;
          }
          jj_consume_token(51);
      {if (true) return exp;}
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case 16:
    case 17:
    case INTLIT:
    case DBLLIT:
    case STRLIT:
    case 50:
      exp = Expr7();
    {if (true) return exp;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Expr7() throws ParseException {
  Ast.Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      exp = Expr();
      jj_consume_token(51);
    {if (true) return exp;}
      break;
    case 16:
    case 17:
    case INTLIT:
    case DBLLIT:
    case STRLIT:
      exp = Literal();
    {if (true) return exp;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
// ------- END EXPRESSIONS CASCADE -------
// ------- END EXPRESSIONS -------

// ------- BEGIN LITERALS -------
//
// IntLit, DblLit, BoolLit, StrLit
  static final public Ast.Exp Literal() throws ParseException {
  Token tkn;
  Ast.IntLit intlit; Ast.DblLit dbllit; Ast.BoolLit boollit; Ast.StrLit strlit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLIT:
      tkn = jj_consume_token(INTLIT);
    intlit = new Ast.IntLit(Integer.parseInt(tkn.image));
    {if (true) return intlit;}
      break;
    case DBLLIT:
      tkn = jj_consume_token(DBLLIT);
    dbllit = new Ast.DblLit(Double.parseDouble(tkn.image));
    {if (true) return dbllit;}
      break;
    case 16:
    case 17:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        tkn = jj_consume_token(16);
        break;
      case 17:
        tkn = jj_consume_token(17);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    boollit = new Ast.BoolLit(Boolean.parseBoolean(tkn.image));
    {if (true) return boollit;}
      break;
    case STRLIT:
      tkn = jj_consume_token(STRLIT);
    {if (true) return new Ast.StrLit(tkn.image);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
// ------- END LITERALS -------

// Id -> <ID>
// Ast.Id object or String
  static final public Ast.Id Id() throws ParseException {
  Token tkn;
    tkn = jj_consume_token(ID);
    {if (true) return new Ast.Id(tkn.image);}
    throw new Error("Missing return statement in function");
  }

// ------- BEGIN OPERATORS -------
//
// binary operators
  static final public Ast.BOP OROP() throws ParseException {
    jj_consume_token(38);
         {if (true) return Ast.BOP.OR;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP ANDOP() throws ParseException {
    jj_consume_token(37);
         {if (true) return Ast.BOP.AND;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP CMPOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
         {if (true) return Ast.BOP.EQ;}
      break;
    case 41:
      jj_consume_token(41);
         {if (true) return Ast.BOP.NE;}
      break;
    case 42:
      jj_consume_token(42);
         {if (true) return Ast.BOP.LT;}
      break;
    case 43:
      jj_consume_token(43);
         {if (true) return Ast.BOP.LE;}
      break;
    case 44:
      jj_consume_token(44);
         {if (true) return Ast.BOP.GT;}
      break;
    case 45:
      jj_consume_token(45);
         {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP ADDSUBOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
         {if (true) return Ast.BOP.ADD;}
      break;
    case 34:
      jj_consume_token(34);
         {if (true) return Ast.BOP.SUB;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP MULDIVOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
         {if (true) return Ast.BOP.MUL;}
      break;
    case 36:
      jj_consume_token(36);
         {if (true) return Ast.BOP.DIV;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// unary operators
  static final public Ast.UOP UNOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
        {if (true) return Ast.UOP.NEG;}
      break;
    case 39:
      jj_consume_token(39);
        {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(STRLIT)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(DBLLIT)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(INTLIT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0x0,0x0,0xe1df0000,0x0,0xe1d30000,0xe1df0000,0xe00f0000,0xe1ff0000,0xe1ff0000,0xe00f0000,0xe00f0000,0x0,0x0,0xe00f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0xe00b0000,0x0,0x0,0xe00b0000,0xe0030000,0x30000,0xe0030000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x1,0x400001,0x400000,0x0,0x400001,0x1,0x400001,0x400001,0x1,0x1,0x120000,0x40000,0x1,0x40,0x20,0x3f00,0x6,0x18,0x84,0x0,0x20000,0x10000,0x40085,0x140000,0x140000,0x40001,0x40000,0x0,0x0,0x3f00,0x6,0x18,0x84,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
