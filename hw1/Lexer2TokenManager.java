/* Generated By:JavaCC: Do not edit this line. Lexer2TokenManager.java */

/** Token Manager. */
public class Lexer2TokenManager implements Lexer2Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         return jjStopAtPos(0, 32);
      case 43:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 45);
      case 45:
         return jjStopAtPos(0, 31);
      case 46:
         return jjStopAtPos(0, 46);
      case 47:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 61:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x804000L);
      case 91:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 93:
         return jjStopAtPos(0, 50);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100040L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x81000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000100L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x48000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStopAtPos(0, 51);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 125:
         return jjStopAtPos(0, 52);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 48:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 61:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10200L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100020L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c00L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 124:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000L);
      case 42:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000a0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2240600L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x400040L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000L);
      case 119:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         break;
      default :
         return 3;
   }
   return 3;
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200900L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x10020L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 124:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      default :
         return 4;
   }
   return 4;
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 91:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 92:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x800800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x180L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4040L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(4, 5);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         return 5;
   }
   return 5;
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L);
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000040L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      default :
         return 6;
   }
   return 6;
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 42:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         break;
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000000L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      default :
         return 8;
   }
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 124:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         return 9;
   }
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000L);
      case 124:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         return 10;
   }
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 57:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         return 11;
   }
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa12_0(active0, 0xc000000L);
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      default :
         return 12;
   }
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 93:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      default :
         return 13;
   }
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
      case 92:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      default :
         return 14;
   }
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      case 90:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      default :
         return 15;
   }
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      case 42:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(15, 27);
         break;
      case 90:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      default :
         return 16;
   }
   return 16;
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000L);
      case 93:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         return 17;
   }
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      case 93:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000L);
      default :
         return 18;
   }
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000L);
      case 91:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L);
      default :
         return 19;
   }
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      case 91:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000L);
      default :
         return 20;
   }
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      case 92:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000L);
      default :
         return 21;
   }
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000L);
      default :
         return 22;
   }
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 22;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 22;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000000L);
      case 124:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000000L);
      default :
         return 23;
   }
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 23;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 23;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa24_0(active0, 0x24000000L);
      default :
         return 24;
   }
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 24;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 24;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0x20000000L);
      default :
         return 25;
   }
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 25;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 25;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa26_0(active0, 0x24000000L);
      default :
         return 26;
   }
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 26;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 26;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa27_0(active0, 0x20000000L);
      case 124:
         return jjMoveStringLiteralDfa27_0(active0, 0x4000000L);
      default :
         return 27;
   }
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 27;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 27;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa28_0(active0, 0x24000000L);
      default :
         return 28;
   }
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 28;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 28;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000000L);
      case 122:
         return jjMoveStringLiteralDfa29_0(active0, 0x20000000L);
      default :
         return 29;
   }
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 29;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 29;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa30_0(active0, 0x24000000L);
      default :
         return 30;
   }
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 30;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 30;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa31_0(active0, 0x4000000L);
      case 124:
         return jjMoveStringLiteralDfa31_0(active0, 0x20000000L);
      default :
         return 31;
   }
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 31;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 31;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa32_0(active0, 0x20000000L);
      case 122:
         return jjMoveStringLiteralDfa32_0(active0, 0x4000000L);
      default :
         return 32;
   }
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 32;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 32;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa33_0(active0, 0x4000000L);
      case 65:
         return jjMoveStringLiteralDfa33_0(active0, 0x20000000L);
      default :
         return 33;
   }
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 33;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 33;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa34_0(active0, 0x20000000L);
      case 124:
         return jjMoveStringLiteralDfa34_0(active0, 0x4000000L);
      default :
         return 34;
   }
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 34;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 34;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa35_0(active0, 0x4000000L);
      case 45:
         return jjMoveStringLiteralDfa35_0(active0, 0x20000000L);
      default :
         return 35;
   }
}
static private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 35;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 35;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa36_0(active0, 0x20000000L);
      case 65:
         return jjMoveStringLiteralDfa36_0(active0, 0x4000000L);
      default :
         return 36;
   }
}
static private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 36;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 36;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa37_0(active0, 0x4000000L);
      case 90:
         return jjMoveStringLiteralDfa37_0(active0, 0x20000000L);
      default :
         return 37;
   }
}
static private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 37;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 37;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa38_0(active0, 0x20000000L);
      case 45:
         return jjMoveStringLiteralDfa38_0(active0, 0x4000000L);
      default :
         return 38;
   }
}
static private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 38;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 38;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa39_0(active0, 0x4000000L);
      case 93:
         return jjMoveStringLiteralDfa39_0(active0, 0x20000000L);
      default :
         return 39;
   }
}
static private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 39;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 39;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa40_0(active0, 0x20000000L);
      case 90:
         return jjMoveStringLiteralDfa40_0(active0, 0x4000000L);
      default :
         return 40;
   }
}
static private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 40;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 40;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(40, 29);
         break;
      case 39:
         return jjMoveStringLiteralDfa41_0(active0, 0x4000000L);
      default :
         return 41;
   }
   return 41;
}
static private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 41;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 41;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa42_0(active0, 0x4000000L);
      default :
         return 42;
   }
}
static private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 42;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 42;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(42, 26);
         break;
      default :
         return 43;
   }
   return 43;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\154\141\163\163", 
"\145\170\164\145\156\144\163", "\163\164\141\164\151\143", "\160\165\142\154\151\143", "\155\141\151\156", 
"\166\157\151\144", "\142\157\157\154\145\141\156", "\151\156\164", "\144\157\165\142\154\145", 
"\123\164\162\151\156\147", "\164\162\165\145", "\146\141\154\163\145", "\156\145\167", 
"\164\150\151\163", "\151\146", "\145\154\163\145", "\167\150\151\154\145", 
"\162\145\164\165\162\156", "\123\171\163\164\145\155", "\157\165\164", "\160\162\151\156\164\154\156", 
"\133\47\141\47\55\47\172\47\174\47\101\47\55\47\132\47\135\53\133\47\60\47\55\47\71\47\174\47\141\47\55\172\47\174\47\101\47\55\47\132\47\135\52", "\47\60\47\174\133\47\61\47\55\47\71\47\135\134\144\52", 
"\134\144\52\56\134\144\52", 
"\42\133\47\141\47\55\47\172\47\174\47\101\47\55\47\132\47\135\52\133\134\144\174\47\141\47\55\47\172\47\174\47\101\47\55\47\132\47\135\52\42", "\53", "\55", "\52", "\57", "\46\46", "\174\174", "\41", "\75\75", "\41\75", 
"\74", "\74\75", "\76", "\76\75", "\75", "\73", "\54", "\56", "\50", "\51", "\133", 
"\135", "\173", "\175", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[0];
static private final int[] jjstateSet = new int[0];
static protected char curChar;
/** Constructor. */
public Lexer2TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public Lexer2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
