/* Generated By:JavaCC: Do not edit this line. Lexer2TokenManager.java */

/** Token Manager. */
public class Lexer2TokenManager implements Lexer2Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000L) != 0L)
            return 13;
         if ((active0 & 0x8000000000000L) != 0L)
            return 4;
         if ((active0 & 0x3ffffe0L) != 0L)
         {
            jjmatchedKind = 31;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x3f7ffe0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 32;
         }
         if ((active0 & 0x80000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x2f5efe0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0x1021000L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x2e169e0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x148600L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x2c069c0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active0 & 0x210020L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0xc06180L) != 0L)
            return 32;
         if ((active0 & 0x2000840L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 32;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 40:
         return jjStopAtPos(0, 52);
      case 41:
         return jjStopAtPos(0, 53);
      case 42:
         return jjStopAtPos(0, 37);
      case 43:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 50);
      case 45:
         return jjStopAtPos(0, 36);
      case 46:
         return jjStartNfaWithStates_0(0, 51, 4);
      case 47:
         return jjStartNfaWithStates_0(0, 38, 13);
      case 59:
         return jjStopAtPos(0, 49);
      case 60:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 61:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 62:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x804000L);
      case 91:
         return jjStopAtPos(0, 54);
      case 93:
         return jjStopAtPos(0, 55);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100040L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x81000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000100L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x48000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStopAtPos(0, 56);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 125:
         return jjStopAtPos(0, 57);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 61:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100020L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c00L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 124:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2240600L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 32);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x400040L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000L);
      case 119:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 32);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 32);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200900L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x10020L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 32);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x800800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x180L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4040L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 32);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 32);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 32);
         break;
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 32);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 32);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 32);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 32);
         break;
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 47)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(14);
                  }
                  if (curChar == 42)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 32:
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(5, 7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if (curChar == 48)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x400002400L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 8:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 47)
                     jjAddStates(5, 7);
                  break;
               case 14:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42)
                     jjCheckNAddStates(8, 10);
                  break;
               case 18:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar != 42)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if ((0xffff7bffffffffffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(11, 13);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(0, 4);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 3);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 46)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(2);
                  break;
               case 6:
                  jjAddStates(14, 15);
                  break;
               case 10:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(11);
                  break;
               case 14:
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  jjCheckNAddTwoStates(19, 17);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   27, 28, 3, 29, 30, 13, 15, 21, 17, 18, 20, 23, 24, 25, 6, 7, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\154\141\163\163", 
"\145\170\164\145\156\144\163", "\163\164\141\164\151\143", "\160\165\142\154\151\143", "\155\141\151\156", 
"\166\157\151\144", "\142\157\157\154\145\141\156", "\151\156\164", "\144\157\165\142\154\145", 
"\123\164\162\151\156\147", "\164\162\165\145", "\146\141\154\163\145", "\156\145\167", 
"\164\150\151\163", "\151\146", "\145\154\163\145", "\167\150\151\154\145", 
"\162\145\164\165\162\156", "\123\171\163\164\145\155", "\157\165\164", "\160\162\151\156\164\154\156", 
null, null, null, null, null, null, null, null, null, "\53", "\55", "\52", "\57", 
"\46\46", "\174\174", "\41", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", 
"\75", "\73", "\54", "\56", "\50", "\51", "\133", "\135", "\173", "\175", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3ffffff83ffffe1L, 
};
static final long[] jjtoSkip = {
   0x40000000000001eL, 
};
static final long[] jjtoSpecial = {
   0x40000000000001cL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[32];
static private final int[] jjstateSet = new int[64];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public Lexer2TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public Lexer2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 58)
   {
      jjmatchedKind = 58;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                String comment = image.toString();
                if (!comment.endsWith("*/"))
                        throw new LexicalError("at (" + matchedToken.beginLine + "," +
                        matchedToken.beginColumn + "). Unclosed comments: " + matchedToken.image, 0);
         break;
      case 58 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            if (true) throw new LexicalError("at (" + matchedToken.beginLine + "," +
                matchedToken.beginColumn + "). Illegal character: " + matchedToken.image, 0);
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          String lexeme = image.toString();
              if (!lexeme.startsWith("0") && !lexeme.contains("0x") && !lexeme.contains("0X")) {
                try { Integer.parseInt(matchedToken.image); }
            catch (Exception e) {
              throw new LexicalError("at (" + matchedToken.beginLine + "," +
              matchedToken.beginColumn + "). Invalid decimal literal: " + matchedToken.image, 0);
            }
              } else if (lexeme.startsWith("0") && !lexeme.contains("0x") && !lexeme.contains("0X")) {
                try { Integer.parseInt(matchedToken.image, 8); }
            catch (Exception e) {
              throw new LexicalError("at (" + matchedToken.beginLine + "," +
              matchedToken.beginColumn + "). Invalid octal literal: " + matchedToken.image, 0);
                }
              } else if (lexeme.startsWith("0x") || lexeme.startsWith("0X")) {
                try { Integer.parseInt(lexeme.substring(2), 16); }
            catch (Exception e) {
              throw new LexicalError("at (" + matchedToken.beginLine + "," +
              matchedToken.beginColumn + "). Invalid hexadecimal literal: " + matchedToken.image, 0);
                }
              }
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              lexeme = image.toString();
              if (lexeme.startsWith("\u005c"") && !lexeme.endsWith("\u005c"") || !lexeme.startsWith("\u005c"") && lexeme.endsWith("\u005c""))
            throw new LexicalError("at (" + matchedToken.beginLine + "," +
            matchedToken.beginColumn + "). Ill-formed or unclosed string: " + matchedToken.image, 0);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
