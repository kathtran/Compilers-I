//----------------------------------------------------------------------
// This is an implementation of a lexer using JavaCC. (For CS321 HW1)
//----------------------------------------------------------------------
//
// Kathleen Tran
// Fall 2015
//

// A lexer for recognizing miniJava. (JavaCC version)
//
PARSER_BEGIN(Lexer2)
public class Lexer2 {}
PARSER_END(Lexer2)

// Token Definitions
//
SKIP:   { <SPACE:  " " | "\t" | "\n" | "\r" > }        // whitespace chars
//SKIP:   { <SLCMT:  "//(~['\n'|<EOF>])*"> }             // single line comment
//SKIP:   { <BLKCMT: ""> }       // block comment

SPECIAL_TOKEN: { <SL_COMMENT: "//" (~["\n"])*> }
MORE:	{ "/*": COMMENT }
<COMMENT> MORE: { <~[]> }
<COMMENT> SPECIAL_TOKEN: { <BLK_COMMENT: "*/">: DEFAULT }

// keywords
TOKEN:  {
<CLASS:         "class">
| <EXTENDS:     "extends">
| <STATIC:      "static">
| <PUBLIC:      "public">
| <MAIN:        "main">
| <VOID:        "void">
| <BOOLEAN:     "boolean">
| <INT:         "int">
| <DOUBLE:      "double">
| <STRING:      "String">
| <TRUE:        "true">
| <FALSE:       "false">
| <NEW:         "new">
| <THIS:        "this">
| <IF:          "if">
| <ELSE:        "else">
| <WHILE:       "while">
| <RETURN:      "return">
| <SYSTEM:      "System">
| <OUT:         "out">
| <PRINTLN:     "println">
}

TOKEN:  {
<#DIGIT:	["0"-"9"]>
| <#LETTER:	["a"-"z"]|["A"-"Z"]>
}

TOKEN:  { <ID:          (<LETTER>)+((<DIGIT>)|(<LETTER>))*> }

TOKEN:  { <INTLIT:      (<DIGIT>)+> }

TOKEN:  { <DBLLIT:      "\\d*.\\d*"> }                                      // double literals
TOKEN:  { <STRLIT:      "\"['a'-'z'|'A'-'Z']*[\\d|'a'-'z'|'A'-'Z']*\""> }   // String literals

// operators
TOKEN:  {
<ADD:           "+">
| <SUB:         "-">
| <MUL:         "*">
| <DIV:         "/">
| <AND:         "&&">
| <OR:          "||">
| <NOT:         "!">
| <EQ:          "==">
| <NE:          "!=">
| <LT:          "<">
| <LE:          "<=">
| <GT:          ">">
| <GE:          ">=">
}

// delimiters
TOKEN:  {
<ASSGN:         "=">
| <SEMI:        ";">
| <COMMA:       ",">
| <DOT:         ".">
| <LPAREN:      "(">
| <RPAREN:      ")">
| <LBRAC:       "[">
| <RBRAC:       "]">
| <LCURLY:      "{">
| <RCURLY:      "}">
}
