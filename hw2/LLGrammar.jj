// This is supporting software for CS321/CS322 Compilers and Language Design.
// Copyright (c) Portland State University.
//---------------------------------------------------------------------------
// For CS321 F'15 (J. Li).
//
// Kathleen Tran
//

// A LL grammar for the miniJava language. (JavaCC Specification)
//

// options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(LLGrammar)
import java.io.*;

public class LLGrammar {
  public static void main(String [] args) {
    if (args.length < 1) {
      System.out.println("Need a file name as command-line argument.");
      return;
    }
    try {
      FileReader input = new FileReader(args[0]);
      new LLGrammar(input).Program();
      input.close();
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(LLGrammar)

//
// LEXER SECTION ---------------------------------------------------------------
//
// A simplified version. Error detections are not included.
//
SKIP:  /* Whitespace */
{
  " " | "\t" | "\r" | "\n"
}

SKIP:  /* Comments -- single-line form only */
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN:  /* Keywords */
{
  "class" | "extends" | "static" | "public" | "main" | "void" | "boolean"
| "int" | "double" | "String" | "true" | "false" | "new" | "this" | "if"
| "else" | "while" | "return" | "System" | "out" | "println"
}

TOKEN:  /* Literals and IDs */
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: ["A"-"Z"]|["a"-"z"]>
| <INTLIT:  "0"|["1"-"9"](<DIGIT>)*> 	// decimal form only
| <DBLLIT:  (<DIGIT>)+"."(<DIGIT>)*|(<DIGIT>)*"."(<DIGIT>)+>
| <STRLIT:  ("\"" (~["\"","\r","\n"])* "\"")>
| <ID:      <LETTER> (<LETTER>|<DIGIT>)*>
}

TOKEN:  /* Operators and delimiters */
{
  "+" | "-" | "*" | "/" | "&&" | "||" | "!" | "==" | "!=" | "<" | "<="
| ">" | ">=" |  "=" | ";" | "," | "." | "(" | ")" | "[" | "]" | "{" | "}"
}

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
void Program(): {}
{
  (ClassDecl())* <EOF>
}

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//
void ClassDecl(): {}
{
  "class" <ID> ["extends" <ID>] "{" (VarDecl())* (MethodDecl())* "}"
}

// MethodDecl -> "public" ExtType <ID> "(" [Param {"," Param}] ")"
//                 "{" {VarDecl} {Stmt} "}"
//            |  "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")"
//                 "{" {VarDecl} {Stmt} "}"
//
void MethodDecl(): {}
{
	"public" M1()
}

void M1(): {}
{
  ExtType() <ID> "(" [Param() ("," Param())*] ")" M2()
| "static" "void" "main" "(" "String" "[" "]" <ID> ")" M2()
}

void M2(): {}
{
	"{" (LOOKAHEAD(2) VarDecl())* (Stmt())* "}"
}

// Param -> Type <ID>
//
void Param(): {}
{
  Type() <ID>
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//
void VarDecl(): {}
{
  Type() <ID> ["=" InitExpr()] ";"
}

// ExtType -> Type | "void"
//
void ExtType(): {}
{
  Type() | "void"
}

// Type -> BasicType
//      |  BasicType "[" "]"
//      |  <ID>
//
void Type(): {}
{
  BasicType() ("[" "]")?
| <ID>
}

// BasicType -> "int" | "double" | "boolean"
//
void BasicType(): {}
{
  "int" | "double" | "boolean"
}

// Stmt -> "{" {Stmt} "}"
//      |  ExtId "(" [Args] ")" ";"
//      |  Lvalue "=" InitExpr ";"
//      |  "if" "(" Expr ")" Stmt ["else" Stmt]
//      |  "while" "(" Expr ")" Stmt
//      |  "System" "." "out" "." "println" "(" [PrArg] ")" ";"
//      |  "return" [Expr] ";"
//
void Stmt(): {}
{
  "{" (Stmt())* "}"
| LOOKAHEAD(2) ExtId() "(" [Args()] ")" ";"
| Lvalue() "=" InitExpr() ";"
| "if" "(" Expr() ")" Stmt() [LOOKAHEAD(2)"else" Stmt()]
| "while" "(" Expr() ")" Stmt()
| "System" "." "out" "." "println" "(" [ PrArg() ] ")" ";"
| "return" [Expr()] ";"
}

// Args -> Expr {"," Expr}
//
void Args(): {}
{
  Expr() ("," Expr())*
}

// PrArg -> Expr | <STRLIT>
//
void PrArg(): {}
{
  Expr() | <STRLIT>
}

// InitExpr -> "new" BasicType "[" <INTLIT> "]"
//          |  "new" <ID> "(" ")"
//          |  Expr
//
void InitExpr(): {}
{
  "new" InitExpr1()
| Expr()
}

void InitExpr1(): {}
{
	BasicType() "[" <INTLIT> "]"
| <ID> "(" ")"
}

// Expr -> Expr BinOp Expr
//      |  UnOp Expr
//      |  "(" Expr ")"
//      |  ExtId "(" [Args] ")"
//      |  Lvalue
//      |  Literal
//
void Expr(): {}
{
  BinOp()
}

// Lvalue -> ExtId "[" Expr "]"
//        |  ExtId
void Lvalue(): {}
{
  ExtId() ("[" Expr() "]")?
}

// ExtId -> ["this" "."] <ID> {"." <ID>}
//
void ExtId(): {}
{
  ["this" "."] <ID> ("." <ID>)*
}

// Literal -> <INTLIT> | <DBLLIT> | "true" | "false"
//
void Literal(): {}
{
  <INTLIT> | <DBLLIT> | "true" | "false"
}

void BinOp(): {}
{
  BinOp1() ("||" BinOp1())*
}

void BinOp1(): {}
{
  BinOp2() ("&&" BinOp2())*
}

void BinOp2(): {}
{
  BinOp3() (("=="|"!="|"<"|"<="|">"|">=") BinOp3())*
}

void BinOp3(): {}
{
  BinOp4() (("+"|"-") BinOp4())*
}

void BinOp4(): {}
{
  BinOp5() (("*"|"/") BinOp5())*
}

void BinOp5(): {}
{
	(UnOp())* Expr1()
}

void Expr1(): {}
{
  ExtId() ["[" Expr() "]" | "(" [Args()] ")"]
| Expr2()
}

void Expr2(): {}
{
  "(" Expr() ")"
| Literal()
}

// BinOp -> "+" | "-" | "*" | "/" | "&&" | "||"
//       |  "==" | "!=" | "<" | "<=" | ">" | ">="
//
//void BinOp(): {}
//{
//  "+"  | "-"  | "*" | "/"  | "&&" | "||"
//| "==" | "!=" | "<" | "<=" | ">"  | ">="
//}

// UnOp -> "-" | "!"
//
void UnOp(): {}
{
  "-" | "!"
}
