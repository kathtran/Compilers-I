// This is supporting software for CS321/CS322 Compilers and Language Design.
// Copyright (c) Portland State University.
//---------------------------------------------------------------------------
// For CS321 F'15 (J. Li).
//

// Stmt2.jj - AST generation for the statement grammar:
//
//   S -> id ( id ) ;
//
// This grammar is for a simplified call statement.
//
//
PARSER_BEGIN(Stmt2)
import java.util.*;
import ast.*;

public class Stmt2 {
  public static void main(String [] args) throws Exception {
    Ast.Stmt s = new Stmt2(System.in).S0();
    System.out.print(s);
  } 
}
PARSER_END(Stmt2)

SKIP : { " " | "\t" | "\r" | "\n" }

TOKEN : 
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: ["A"-"Z"]|["a"-"z"]>
| <ID:      <LETTER>(<LETTER>|<DIGIT>)*> 
| <IntLit:  (<DIGIT>)+> 
}

// S0 -> S <EOF>
//
Ast.Stmt S0():
{ Ast.Stmt s; }
{
  s=S() <EOF> { return s; }
}

// S -> Id "(" Id ")" ";"
//
Ast.Stmt S():
{ List<Ast.Exp> args = new ArrayList<Ast.Exp>();
  Ast.Id id1, id2; Token tkn; Ast.IntLit intlit; }
{
  id1=Id()
	( "=" tkn=<IntLit> ";"
		{ intlit = new Ast.IntLit(Integer.parseInt(tkn.image));
		return new Ast.Assign(id1, intlit); }
	|	"(" id2=Id() ")" ";"
    { args.add(id2);
    return new Ast.CallStmt(new Ast.This(), id1.nm, args); }
	)
}

// Id -> <ID>
//
Ast.Id Id():
{ Token tkn; }
{
  tkn=<ID> { return new Ast.Id(tkn.image); }
}
